@model EagleEye.Views.ParkingLot.ParkingLot
@{
	Layout = "~/Views/ParkingLot/_ParkingLot.cshtml";
}
@section Buttons {
	<div class="panel panel-default">
		<div class="panel-heading">
			Statistics
		</div>
		<table class="panel-body table">
			<tr>
				<th class="bg-success">Available</th>
				<td id="availableSpaces" class="bg-success">...</td>
			</tr>
			<tr>
				<th class="bg-danger">Occupied</th>
				<td id="occupiedSpaces" class="bg-danger">...</td>
			</tr>
			<tr>
				<th  class="bg-warning">Partially Obstructed</th>
				<td id="partialSpaces" class="bg-warning">...</td>
			</tr>
			<tr>
				<th>Total Spaces</th>
				<td id="totalSpaces" >...</td>
			</tr>
		</table>
	</div>
	<div class="panel panel-default">
		<div class="panel-heading">
			Debug
		</div>
		<div class="panel-body">
			<label>Partially Obstructed Threshold:</label>
			<input class="form-control" type="range" min="0" max="1" step=".01" value="0.1" id="partiallyObstructedThreshold" />
			<label>Obstructed Threshold:</label>
			<input class="form-control" type="range" min="0" max="1" step=".01" value="0.25" id="obstructedThreshold" />
		</div>
	</div>
}
@section scripts {
	<script>
	let viewer = null;
	function createPath() {
		viewer.setPath(viewer.aStar(new Vector2(1,1), viewer.lot.Annotations[6].midpoints));
	}
	function updateViewer() {
		$.ajax({
			url: '/ParkingLot/Get',
			data: { id:@Model.ID}
		}).done(lot => {
			// Convert annotation points into Vector2 instances
			let annotationModels = lot.Annotations;
			lot.Annotations = [];
			annotationModels.forEach(a => {
				let annotation = new Annotation(a);
				let points = annotation.Points;
				annotation.Points = [];
				points.forEach(p => {
					annotation.Points.push(new Vector2(p.X, p.Y));
				});
				lot.Annotations.push(annotation);
			});
			
			if (viewer === null) {
				// create a new viewer
				viewer = new AnnotationViewer(lot, annotations, (self, ctx, annotation) => {
					ctx.lineWidth = 1;
					if (viewer.goal && annotation.ID === viewer.goal.ID) {
						ctx.strokeStyle = 'blue';
						ctx.lineWidth = 8;
					} else {
						ctx.strokeStyle = 'black';

					}
					if (annotation.Type === 'Parking') {
						if (annotation.PercentDifference > document.getElementById('obstructedThreshold').value) {
							ctx.fillStyle = 'rgba(255,0,0,0.5)';
						} else if (annotation.PercentDifference > document.getElementById('partiallyObstructedThreshold').value) {
							ctx.fillStyle = 'rgba(255,255,0,0.5)';
						} else {
							ctx.fillStyle = 'rgba(0,255,0,0.5)';
						}
						
						return true;
					} else if (annotation.Type === 'Aisle') {
						ctx.fillStyle = 'rgba(128,128,255,0.2)';
						return true;
					} else {
						return false;
					}
					
				}, (self, ctx, annotation, point) => {
					if (point === self.start) {
						ctx.fillStyle = 'blue';
						ctx.strokeStyle = 'blue';
						ctx.lineWidth = 16;
						return true;
					} else {
						return false;
					}
					
					});
				annotations.addEventListener('click', (evt) => {
					let pos = new Vector2(evt.offsetX / annotations.width, evt.offsetY / annotations.height);
					let target = viewer.lot.Annotations.find(an => an.Type === "Parking" && an.contains(pos));
					if (target) {
						viewer.goal = target;
					} else {
						viewer.start = pos;
					}
				});
				viewer.tick();
				// load the feed
				displayFeed();
			} else {
				// update the existing viewer's lot
				viewer.lot = lot;
			}
			// Update statistics
			let total = 0;
			let available = 0;
			let occupied = 0;
			let partial = 0;
			lot.Annotations.forEach(annotation => {
				if (annotation.Type === 'Parking') {
					total++;
					if (annotation.PercentDifference > document.getElementById('obstructedThreshold').value) {
						occupied++;
					} else if (annotation.PercentDifference > document.getElementById('partiallyObstructedThreshold').value) {
						partial++;
					} else {
						available++;
					}
				}
			});
			document.getElementById('availableSpaces').innerHTML = available;
			document.getElementById('occupiedSpaces').innerHTML = occupied;
			document.getElementById('partialSpaces').innerHTML = partial;
			document.getElementById('totalSpaces').innerHTML = total;

			window.setTimeout(() => {
				updateViewer();
			}, 500);
		});
	}
	updateViewer();
	</script>
}
